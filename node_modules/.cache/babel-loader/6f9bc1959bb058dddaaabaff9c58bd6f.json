{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nvar URL = require('url');\n\nmodule.exports = function createClient(port_arg, host_arg, options) {\n  if (typeof port_arg === 'number' || typeof port_arg === 'string' && /^\\d+$/.test(port_arg)) {\n    var host;\n\n    if (typeof host_arg === 'string') {\n      host = host_arg;\n    } else {\n      if (options && host_arg) {\n        throw new TypeError('Unknown type of connection in createClient()');\n      }\n\n      options = options || host_arg;\n    }\n\n    options = utils.clone(options);\n    options.host = host || options.host;\n    options.port = port_arg;\n  } else if (typeof port_arg === 'string' || port_arg && port_arg.url) {\n    options = utils.clone(port_arg.url ? port_arg : host_arg || options);\n    var url = port_arg.url || port_arg;\n    var parsed = URL.parse(url, true, true); // [redis:]//[[user][:password]@][host][:port][/db-number][?db=db-number[&password=bar[&option=value]]]\n\n    if (parsed.slashes) {\n      // We require slashes\n      if (parsed.auth) {\n        options.password = parsed.auth.split(':')[1];\n      }\n\n      if (parsed.protocol && parsed.protocol !== 'redis:') {\n        console.warn('node_redis: WARNING: You passed \"' + parsed.protocol.substring(0, parsed.protocol.length - 1) + '\" as protocol instead of the \"redis\" protocol!');\n      }\n\n      if (parsed.pathname && parsed.pathname !== '/') {\n        options.db = parsed.pathname.substr(1);\n      }\n\n      if (parsed.hostname) {\n        options.host = parsed.hostname;\n      }\n\n      if (parsed.port) {\n        options.port = parsed.port;\n      }\n\n      if (parsed.search !== '') {\n        var elem;\n\n        for (elem in parsed.query) {\n          // If options are passed twice, only the parsed options will be used\n          if (elem in options) {\n            if (options[elem] === parsed.query[elem]) {\n              console.warn('node_redis: WARNING: You passed the ' + elem + ' option twice!');\n            } else {\n              throw new RangeError('The ' + elem + ' option is added twice and does not match');\n            }\n          }\n\n          options[elem] = parsed.query[elem];\n        }\n      }\n    } else if (parsed.hostname) {\n      throw new RangeError('The redis url must begin with slashes \"//\" or contain slashes after the redis protocol');\n    } else {\n      options.path = url;\n    }\n  } else if (typeof port_arg === 'object' || port_arg === undefined) {\n    options = utils.clone(port_arg || options);\n    options.host = options.host || host_arg;\n\n    if (port_arg && arguments.length !== 1) {\n      throw new TypeError('To many arguments passed to createClient. Please only pass the options object');\n    }\n  }\n\n  if (!options) {\n    throw new TypeError('Unknown type of connection in createClient()');\n  }\n\n  return options;\n};","map":{"version":3,"sources":["/Users/erinx/code/hyperplaneReact/road-to-react/js-job-board-diy/node_modules/redis/lib/createClient.js"],"names":["utils","require","URL","module","exports","createClient","port_arg","host_arg","options","test","host","TypeError","clone","port","url","parsed","parse","slashes","auth","password","split","protocol","console","warn","substring","length","pathname","db","substr","hostname","search","elem","query","RangeError","path","undefined","arguments"],"mappings":"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","sourcesContent":["'use strict';\n\nvar utils = require('./utils');\nvar URL = require('url');\n\nmodule.exports = function createClient (port_arg, host_arg, options) {\n\n    if (typeof port_arg === 'number' || typeof port_arg === 'string' && /^\\d+$/.test(port_arg)) {\n\n        var host;\n        if (typeof host_arg === 'string') {\n            host = host_arg;\n        } else {\n            if (options && host_arg) {\n                throw new TypeError('Unknown type of connection in createClient()');\n            }\n            options = options || host_arg;\n        }\n        options = utils.clone(options);\n        options.host = host || options.host;\n        options.port = port_arg;\n\n    } else if (typeof port_arg === 'string' || port_arg && port_arg.url) {\n\n        options = utils.clone(port_arg.url ? port_arg : host_arg || options);\n        var url = port_arg.url || port_arg;\n        var parsed = URL.parse(url, true, true);\n\n        // [redis:]//[[user][:password]@][host][:port][/db-number][?db=db-number[&password=bar[&option=value]]]\n        if (parsed.slashes) { // We require slashes\n            if (parsed.auth) {\n                options.password = parsed.auth.split(':')[1];\n            }\n            if (parsed.protocol && parsed.protocol !== 'redis:') {\n                console.warn('node_redis: WARNING: You passed \"' + parsed.protocol.substring(0, parsed.protocol.length - 1) + '\" as protocol instead of the \"redis\" protocol!');\n            }\n            if (parsed.pathname && parsed.pathname !== '/') {\n                options.db = parsed.pathname.substr(1);\n            }\n            if (parsed.hostname) {\n                options.host = parsed.hostname;\n            }\n            if (parsed.port) {\n                options.port = parsed.port;\n            }\n            if (parsed.search !== '') {\n                var elem;\n                for (elem in parsed.query) {\n                    // If options are passed twice, only the parsed options will be used\n                    if (elem in options) {\n                        if (options[elem] === parsed.query[elem]) {\n                            console.warn('node_redis: WARNING: You passed the ' + elem + ' option twice!');\n                        } else {\n                            throw new RangeError('The ' + elem + ' option is added twice and does not match');\n                        }\n                    }\n                    options[elem] = parsed.query[elem];\n                }\n            }\n        } else if (parsed.hostname) {\n            throw new RangeError('The redis url must begin with slashes \"//\" or contain slashes after the redis protocol');\n        } else {\n            options.path = url;\n        }\n\n    } else if (typeof port_arg === 'object' || port_arg === undefined) {\n        options = utils.clone(port_arg || options);\n        options.host = options.host || host_arg;\n\n        if (port_arg && arguments.length !== 1) {\n            throw new TypeError('To many arguments passed to createClient. Please only pass the options object');\n        }\n    }\n\n    if (!options) {\n        throw new TypeError('Unknown type of connection in createClient()');\n    }\n\n    return options;\n};\n"]},"metadata":{},"sourceType":"script"}